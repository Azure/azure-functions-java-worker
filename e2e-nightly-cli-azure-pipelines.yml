# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
pool:
  vmImage: 'vs2017-win2016'

steps:
- task: NuGetToolInstaller@0
  inputs:
   checkLatest: true
- pwsh: |
     Get-Command mvn
  displayName: 'Installing Maven'
- pwsh: |
      $buildNumber = 0      
      if($env:APPVEYOR_REPO_TAG -eq "true") {
       $buildNumber = $(Build.SourceBranchName)
       Write-Host “Found git tag."
      } 
      else {
       $buildNumber = "1.5.2-SNAPSHOT-$(Build.BuildId)"
       Write-Host “git tag not found. Setting package suffix to '$buildNumber'"
      }     
      .\package.ps1 -buildNumber $buildNumber
  displayName: 'Executing build script'
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.Repository.LocalPath)/pkg'
    Contents: '*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true
  displayName: 'Copying files for artifacts'
- pwsh: |
      .\setup-tests.ps1
  displayName: 'Setting tests'
- pwsh: |
      .\run-tests.ps1
  env:
    AzureWebJobsStorage: $(AzureWebJobsStorage)
    AzureWebJobsCosmosDBConnectionString: $(AzureWebJobsCosmosDBConnectionString)
    AzureWebJobsServiceBus: $(AzureWebJobsServiceBus)
    AzureWebJobsEventHubReceiver: $(AzureWebJobsEventHubReceiver)
    AzureWebJobsEventHubSender: $(AzureWebJobsEventHubSender)
    AzureWebJobsEventHubPath: $(AzureWebJobsEventHubPath)
    SBTopicName: $(SBTopicName)
    SBTopicSubName: $(SBTopicSubName)
    CosmosDBDatabaseName: $(CosmosDBDatabaseName)
    SBQueueName: $(SBQueueName)
    AzureWebJobsEventHubSender_2: $(AzureWebJobsEventHubSender_2)
  displayName: 'running tests'
  continueOnError: true
- pwsh: |
      Compress-Archive -Path $(System.DefaultWorkingDirectory)\endtoendtests\target\azure-functions\azure-functions-java-endtoendtests\* -DestinationPath $(System.DefaultWorkingDirectory)\endtoendtests\e2etestsjava.zip
  displayName: 'Create test app zip file'
- pwsh: |
    Install-Module Az.Storage -Force -Verbose -Scope CurrentUser
    if (-not (Get-command new-azstoragecontext -ea SilentlyContinue))
    {
      throw "new-azstoragecontext is not present"
    }
    $localFile = '$(System.DefaultWorkingDirectory)\endtoendtests\e2etestsjava.zip'
    if (Test-Path $localFile)
    {
      Write-Host "File exists"
    } 
    $blobName = 'e2etestsjava.zip'
    $Context = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $(StorageAccountKey)
    Set-AzStorageBlobContent -File $localFile -Container $(ContainerName) -Blob $blobName -Context $Context  -Force -Verbose
  env:
    AzureFunctionsE2ETestStorage: $(AzureFunctionsE2ETestStorage)
  displayName: 'Copying test app zip artifacts to blob'
- pwsh: |
      Compress-Archive -Path '$(Build.Repository.LocalPath)\pkg\*' -DestinationPath $(System.DefaultWorkingDirectory)\javaworker.zip
  displayName: 'Create test app zip file'
- pwsh: |
    $localFileJavaWorker = '$(System.DefaultWorkingDirectory)\javaworker.zip'
    if (Test-Path $localFileJavaWorker)
    {
      Write-Host "localFileJavaWorker file exists"
    } 
    $blobNameJavaWorker = 'javaworker.zip'
    $Context = New-AzStorageContext -StorageAccountName $(StorageAccountName) -StorageAccountKey $(StorageAccountKey)
    Set-AzStorageBlobContent -File $localFileJavaWorker -Container $(ContainerName) -Blob $blobNameJavaWorker -Context $Context  -Force -Verbose
  env:
    AzureFunctionsE2ETestStorage: $(AzureFunctionsE2ETestStorage)
  displayName: 'Copying java worker zip to blob'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publishing build and test result artifacts'